/*
Module: PE_array
Author: Chia-Jen Nieh
Description: 3*3 weight stationary systolic array supporting kernel_27, After reset, the weight and data are fed in interleavedly, never stop until reset again
    clk_in:          clock
    rst_in:          active low reset
    data_in:         the weight or activation going to be written in
    psum_row_*_out:  partial sum of an output layer, latter been changed to one sign bit represent whole sum
*/
`include "PE_row_27.v"
module PE_array (
    clk_in,
    rst_in,
    // load_in,
    data_in,
    // psum_row_0_in, psum_row_1_in, psum_row_2_in,
    psum_row_0_out, psum_row_1_out, psum_row_2_out
);

parameter WIDTH = 14;
parameter ROW_LENGTH = 7;
parameter O_CH = 3;
parameter LOAD_COUNT_LIMIT = O_CH * ROW_LENGTH + ROW_LENGTH - 1;

input            clk_in, rst_in;
input  [27-1:0]  data_in;

// input  [WIDTH-1:0] psum_row_0_in, psum_row_1_in, psum_row_2_in; //2**13-1=8191, larger than 9*512=4608
output [WIDTH-1:0] psum_row_0_out, psum_row_1_out, psum_row_2_out;//sign bit, can be reduce to psum_row_out in time sequence

wire   [27*ROW_LENGTH-1:0]  activation_row_0_out_w, activation_row_1_out_w, activation_row_end;//activation_row_end of no use

reg    [WIDTH-1:0] psum_row_0_r, psum_row_1_r, psum_row_2_r, psum_row_0_w, psum_row_1_w, psum_row_2_w;//For saving temporary row sum, 2**13-1=8191, larger than 9*512=4608
wire    [WIDTH-1:0] psum_row_0_tmp, psum_row_1_tmp, psum_row_2_tmp;
reg    [5-1:0]  load_count_r, load_count_w;
reg    [27*ROW_LENGTH-1:0]  activation_in_r, activation_in_w;

reg    [27-1:0]  weight_r[0:O_CH*ROW_LENGTH-1], weight_w[0:O_CH*ROW_LENGTH-1];
reg    [27*ROW_LENGTH-1:0] weight_row_in[0:O_CH-1];
reg     psum_row_lock_r[0:O_CH-1], psum_row_lock_w[0:O_CH-1];//Lock the value of psum_row_0_r, psum_row_1_r, psum_row_2_r
wire [27*ROW_LENGTH-1:0] activation_row_0_to_1, activation_row_1_to_2;
reg first_r, first_w;

integer i;

// assign psum_row_0_out = psum_row_0_r[WIDTH-1];
// assign psum_row_1_out = psum_row_1_r[WIDTH-1];
// assign psum_row_2_out = psum_row_2_r[WIDTH-1];

//For test
assign psum_row_0_out = psum_row_0_r;
assign psum_row_1_out = psum_row_1_r;
assign psum_row_2_out = psum_row_2_r;

//Generate weight row in
generate
    genvar j,k;
    for (j = 0; j < O_CH; j = j + 1) begin : a
        for (k = 0; k < ROW_LENGTH; k = k + 1) begin : b
            always @(*) begin
                weight_row_in[j][27*(ROW_LENGTH-k)-1:27*(ROW_LENGTH-k-1)] = weight_r[ROW_LENGTH*j+k];
            end
        end
    end
endgenerate

PE_row PE_row_0(
    .clk_in(clk_in),
    .rst_in(rst_in),
    .activation_in(activation_in_r),
    .weight_in(weight_row_in[0]),
    .psum_in(psum_row_0_r),
    .activation_out(activation_row_0_to_1),
    .psum_out(psum_row_0_tmp)
);

PE_row PE_row_1(
    .clk_in(clk_in),
    .rst_in(rst_in),
    .activation_in(activation_row_0_to_1),
    .weight_in(weight_row_in[1]),
    .psum_in(psum_row_1_r),
    .activation_out(activation_row_1_to_2),
    .psum_out(psum_row_1_tmp)
);

PE_row PE_row_2(
    .clk_in(clk_in),
    .rst_in(rst_in),
    .activation_in(activation_row_1_to_2),
    .weight_in(weight_row_in[2]),
    .psum_in(psum_row_2_r),
    .activation_out(activation_row_end),
    .psum_out(psum_row_2_tmp)
);


//Handle first input run, lock the psum
always @(*) begin
    first_w = first_r;
    if (load_count_r == LOAD_COUNT_LIMIT) 
        first_w = 1'b0;
end

always @(posedge clk_in) begin
    if(rst_in == 1'b0) begin
        first_r <= 1'b1;
    end
    else begin
        first_r <= first_w;
    end
end

//Handle activation
always @(*) begin
    activation_in_w = activation_in_r;
    case (load_count_r)
        5'd21: begin
            activation_in_w[27*(ROW_LENGTH)-1:27*(ROW_LENGTH-1)] = data_in;
        end
        5'd22: begin
            activation_in_w[27*(ROW_LENGTH-1)-1:27*(ROW_LENGTH-2)] = data_in;
        end
        5'd23: begin
            activation_in_w[27*(ROW_LENGTH-2)-1:27*(ROW_LENGTH-3)] = data_in;
        end
        5'd24: begin
            activation_in_w[27*(ROW_LENGTH-3)-1:27*(ROW_LENGTH-4)] = data_in;
        end
        5'd25: begin
            activation_in_w[27*(ROW_LENGTH-4)-1:27*(ROW_LENGTH-5)] = data_in;
        end
        5'd26: begin
            activation_in_w[27*(ROW_LENGTH-5)-1:27*(ROW_LENGTH-6)] = data_in;
        end
        5'd27: begin
            activation_in_w[27*(ROW_LENGTH-6)-1:27*(ROW_LENGTH-7)] = data_in;
        end
    endcase
end

always @(posedge clk_in) begin
    if(rst_in == 1'b0) begin
        activation_in_r <= {27*ROW_LENGTH{1'b0}};
    end
    else begin
        activation_in_r <= activation_in_w;
    end
end

//Handle weight
always @(*) begin
    for (i = 0; i < O_CH * ROW_LENGTH; i = i + 1) begin
        weight_w[i] = weight_r[i];
    end
    case (load_count_r)
        5'd0: begin
            weight_w[0] = data_in;
        end
        5'd1: begin
            weight_w[1] = data_in;
        end
        5'd2: begin
            weight_w[2] = data_in;
        end
        5'd3: begin
            weight_w[3] = data_in;
        end
        5'd4: begin
            weight_w[4] = data_in;
        end
        5'd5: begin
            weight_w[5] = data_in;
        end
        5'd6: begin
            weight_w[6] = data_in;
        end
        5'd7: begin
            weight_w[7] = data_in;
        end
        5'd8: begin
            weight_w[8] = data_in;
        end
        5'd9: begin
            weight_w[9] = data_in;
        end
        5'd10: begin
            weight_w[10] = data_in;
        end
        5'd11: begin
            weight_w[11] = data_in;
        end
        5'd12: begin
            weight_w[12] = data_in;
        end
        5'd13: begin
            weight_w[13] = data_in;
        end
        5'd14: begin
            weight_w[14] = data_in;
        end
        5'd15: begin
            weight_w[15] = data_in;
        end
        5'd16: begin
            weight_w[16] = data_in;
        end
        5'd17: begin
            weight_w[17] = data_in;
        end
        5'd18: begin
            weight_w[18] = data_in;
        end
        5'd19: begin
            weight_w[19] = data_in;
        end
        5'd20: begin
            weight_w[20] = data_in;
        end
    endcase
end

always @(posedge clk_in) begin
    if(rst_in == 1'b0) begin
        for (i = 0; i < O_CH * ROW_LENGTH; i = i + 1) begin
            weight_r[i] <= 27'd0;
        end
    end
    else begin
        for (i = 0; i < O_CH * ROW_LENGTH; i = i + 1) begin
            weight_r[i] <= weight_w[i];
        end
    end
end

//Handle load_count
always @(*) begin
    load_count_w = load_count_r + 1;
    if (load_count_r == LOAD_COUNT_LIMIT) begin
        load_count_w = 5'd0;
    end
end

always @(posedge clk_in) begin
    if(rst_in == 1'b0) begin
        load_count_r <= 5'd0;
    end
    else begin
        load_count_r <= load_count_w;
    end
end

//Handle psum_row[*]
always @(*) begin
    psum_row_0_w = psum_row_0_r;
    psum_row_1_w = psum_row_1_r;
    psum_row_2_w = psum_row_2_r;
    if (psum_row_lock_r[0] == 1'b0)
        psum_row_0_w = psum_row_0_tmp;

    if (psum_row_lock_r[1] == 1'b0)
        psum_row_1_w = psum_row_1_tmp;

    if (psum_row_lock_r[2] == 1'b0)
        psum_row_2_w = psum_row_2_tmp;
end

always @(posedge clk_in) begin
    if(rst_in == 1'b0) begin
        psum_row_0_r <= {WIDTH{1'b0}};
        psum_row_1_r <= {WIDTH{1'b0}};
        psum_row_2_r <= {WIDTH{1'b0}};
    end
    else begin
        psum_row_0_r <= psum_row_0_w;
        psum_row_1_r <= psum_row_1_w;
        psum_row_2_r <= psum_row_2_w;
    end
end

//Handle psum row lock
always @(*) begin
    for (i = 0; i < O_CH; i = i + 1) begin
        psum_row_lock_w[i] = 1'b1;
    end
    case (load_count_r)
        5'd0: begin
            if (first_r != 1'b1)
                psum_row_lock_w[0] = 1'b0;
        end
        5'd1: begin
            if (first_r != 1'b1)
                psum_row_lock_w[1] = 1'b0;
        end
        5'd2: begin
            if (first_r != 1'b1)
                psum_row_lock_w[2] = 1'b0;
        end
    endcase
end

always @(posedge clk_in) begin
    if(rst_in == 1'b0) begin
        for (i = 0; i < O_CH; i = i + 1) begin
            psum_row_lock_r[i] <= 1'b1;
        end
    end
    else begin
        for (i = 0; i < O_CH; i = i + 1) begin
            psum_row_lock_r[i] <= psum_row_lock_w[i];
        end
    end
end
endmodule
